name: Deploy Static Website to GitHub Pages

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, proceeding without npm install"
          fi

      - name: Optimize and minify assets
        run: |
          npm install -g html-minifier-terser uglifycss
          mkdir -p dist
          cp -r * dist/ 2>/dev/null || true
          rm -rf dist/dist 2>/dev/null || true
          rm -rf dist/.github 2>/dev/null || true
          rm -rf dist/node_modules 2>/dev/null || true
          if [ -f dist/index.html ]; then
            html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --remove-optional-tags \
              --remove-redundant-attributes \
              --remove-script-type-attributes \
              --remove-tag-whitespace \
              --use-short-doctype \
              --minify-css true \
              --minify-js true \
              --input-dir dist \
              --output-dir dist \
              --file-ext html
          fi
          if [ -f dist/css/style.css ]; then
            uglifycss dist/css/style.css > dist/css/style.min.css
            mv dist/css/style.min.css dist/css/style.css
          fi
          if [ -f dist/js/main.js ]; then
            npx terser dist/js/main.js --compress --mangle --output dist/js/main.min.js
            mv dist/js/main.min.js dist/js/main.js
          fi

      - name: Create robots.txt
        run: |
          cat > dist/robots.txt << EOF
          User-agent: *
          Allow: /

          Sitemap: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f2).github.io/sitemap.xml
          EOF

      - name: Create sitemap.xml
        run: |
          cat > dist/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://cloudops-solutions.github.io/</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://cloudops-solutions.github.io/#services</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
            </url>
            <url>
              <loc>https://cloudops-solutions.github.io/#portfolio</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
            </url>
            <url>
              <loc>https://cloudops-solutions.github.io/#about</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.7</priority>
            </url>
            <url>
              <loc>https://cloudops-solutions.github.io/#contact</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.9</priority>
            </url>
          </urlset>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.LHCI_SERVER_BASE_URL }}
          LHCI_SERVER_TOKEN: ${{ secrets.LHCI_SERVER_TOKEN }}